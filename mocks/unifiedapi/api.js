// Unified API Mocking
// Copyright (c) 2011 Open Wide and others
// 
// MIT licensed
// 
// Contact : easysoa-dev@googlegroups.com

/**
 * 
 * --------------
 * Object kinds
 * --------------
 * 
 * Service
 * 		Business or technical service need, independently from its implementation.
 * 		Impls. may or may not be made available as web services (see Scaffolder Client). 
 * Service Implementation
 * 		Implementation of a Service. Several implementations of the same need can exist,
 * 		for instance a light (scripted) implementation, a full implementation and a mock one.
 * Service Endpoint
 * 		Service Impl. launched and made available through the web.
 * 
 * Environment
 * 		Collection of Service Endpoints used together in a certain context (development, staging...)
 * 
 * Scaffolder Client
 * 		Specific type of Service Impl. generated by EasySOA Light as a client to call
 * 		existing Service Endpoints.
 * Scaffolder Client UI
 * 		Part of a scaffolder client that displays a form for users to call a service endpoint.
 * 		Should be customizable (by editing the template for example).
 * 
 * Other possible objects:
 * 	- Development Environment (specific type of environment?)
 * 
 * --------------
 * Ressources hierarchy
 * --------------
 * /envDev/scaffolderClient/references/calledService
*/

/*
Scenarios TODO

OK scaffolder calling a service selected (in accessible environments)
OK scaffolder calling a mock
scaffolder, then (from called service in this environment) create mock, by replace (or LATER fork)

scaffolder, then in between add WS monitoring proxy
then record exchanges (autostart, reset(), save(name), restore(name))
then create mock using a named recorded session of exchanges (when a given request appears, return the response)

then create template UI impl to replace scaffolder (LATER impl rather linked or forked from other env)
then add WS proxy + js impl between template UI and mock
then record exchanges and let the user tailor a recording session that is a test suite
then setup test suite to be called on each js impl changes

*/

var utils = require('./utils.js');

EASYSOA_HOST = "http://localhost";
EASYSOA_LIGHT_SERVER_URL = EASYSOA_HOST + ":9011/";
EASYSOA_PAF_SERVICES_URL = EASYSOA_HOST + ":9010/";
EASYSOA_SCAFFOLDER_UI_URL = EASYSOA_HOST + ":8090/";

SERVICE_IMPL_TYPE_SCAFFOLDER_CLIENT = "scaffolderclient";
SERVICE_IMPL_TYPE_MOCK = "mock";
SERVICE_IMPL_TYPE_EXTERNAL = "external";

// ===================== Default objects =====================

var ServiceImpl = {
    name : undefined,
    type : undefined
};

var ServiceScaffolderImpl = ServiceImpl.extend({
    name : undefined,
    targetEndpoint : undefined,
    type : SERVICE_IMPL_TYPE_SCAFFOLDER_CLIENT
});

var MockImpl = ServiceImpl.extend({
    name : undefined,
    type : SERVICE_IMPL_TYPE_MOCK
});

var ServiceEndpoint = {
    name : undefined,
    type : undefined,
    url : undefined,
    env : undefined,
    started : false,
    checkStarted : function() {
        console.log(" * Checking: " + this.url);
        return this.started;
    },
    start : function() {
        console.log(" * Starting: " + this.name);
        this.started = true;
        return this.started;
    },
    stop : function() {
        console.log(" * Stopping: " + this.name);
        this.started = false;
    }
};

var ServiceScaffolderEndpoint = ServiceEndpoint.extend({
    name : undefined,
    url : undefined, // UI
    targetEndpoint : undefined,
    type : SERVICE_IMPL_TYPE_SCAFFOLDER_CLIENT
});

var MockEndpoint = ServiceEndpoint.extend({
    name : undefined,
    url : undefined,
    type : SERVICE_IMPL_TYPE_MOCK
});

var Environment = {
    id : undefined,
    name : undefined,
    implServerUrl : undefined,
    serviceImpls : new Array(),
    externalServiceEndpoints : new Array()
};

// ===================== EasySOA UI =====================

exports.selectServiceEndpointInUI = function(envFilter) {
    return ServiceEndpoint.extend({
        name : "PureAirFlowers",
        type : SERVICE_IMPL_TYPE_EXTERNAL,
        env : Environment.extend({
                id : 2,
                name : envFilter[0],
                implServerUrl : EASYSOA_PAF_SERVICES_URL
            }),
        url : EASYSOA_PAF_SERVICES_URL + "PureAirFlowers",
        started : true
    });
};

// ===================== Services =====================

exports.createMockServiceImpl = function(serviceEndpointToMock) {
    return MockImpl.extend({
        name : serviceEndpointToMock.name + " mock"
    });
};

// ===================== Environments =====================

exports.createEnvironment = function(envKind, user, name) {
    if (envKind == "Light") {
        implServerUrl = EASYSOA_LIGHT_SERVER_URL;
    }
    var id = 0;
    return Environment.extend({
        id : id,
        name : user + "_" + id + "_" + name,
        implServerUrl : implServerUrl
    });
};

exports.addExternalServiceEndpoint = function(env, serviceEndpointToScaffold) {
    env.externalServiceEndpoints.push(serviceEndpointToScaffold);
};

exports.addServiceImpl = function(env, serviceImpl) {
    var newServiceEndpoint = ServiceEndpoint.extend(serviceImpl);
    newServiceEndpoint.env = env;
    
    switch (newServiceEndpoint.type) {
        case SERVICE_IMPL_TYPE_SCAFFOLDER_CLIENT:
            newServiceEndpoint.url = env.implServerUrl + utils.toUrlPath(serviceImpl.name)
                + "_Scaffolder_Client?endpoint=" + serviceImpl.targetEndpoint;
            break;
        case SERVICE_IMPL_TYPE_MOCK:
            newServiceEndpoint.url = env.implServerUrl + "mock/" + utils.toUrlPath(serviceImpl.name);
            break;
        default:
            newServiceEndpoint.url = env.implServerUrl + utils.toUrlPath(serviceImpl.name);
    }
    
    env.serviceImpls.push(newServiceEndpoint);
    return newServiceEndpoint;
};

exports.start = function(env) {
    for (i in env.externalServiceEndpoints) {
        if (!env.externalServiceEndpoints[i].checkStarted()) {
            return false;
        }
    }
    for (i in env.serviceImpls) {
        if (!env.serviceImpls[i].start()) {
            return false;
        }
    }
    return true;
};

exports.stop = function(env) {
    for (serviceImpl in env.serviceImpls) {
        serviceImpl.stop();
    }
};

//===================== Scaffolder clients =====================

exports.createScaffolderClient = function(env, serviceEndpointToScaffold) {
    return ServiceScaffolderImpl.extend({
        name : serviceEndpointToScaffold.name + " Scaffolder Client",
        url : env.implServerUrl + utils.toUrlPath(serviceEndpointToScaffold.name) + "_Scaffolder_Client",
        targetEndpoint : serviceEndpointToScaffold.url,
        type : SERVICE_IMPL_TYPE_SCAFFOLDER_CLIENT
    });
};

exports.setTargetEndpoint = function(serviceEndpointToScaffold, targetEndpoint) {
    serviceEndpointToScaffold.targetEndpoint = targetEndpoint.url;
    serviceEndpointToScaffold.url = serviceEndpointToScaffold.env.implServerUrl
            + utils.toUrlPath(targetEndpoint.name)
            + "_Scaffolder_Client?endpoint=" + targetEndpoint.url;
};

exports.display = function(serviceEndpointToScaffold) {
    console.log("Displaying UI: "+serviceEndpointToScaffold.url);
};