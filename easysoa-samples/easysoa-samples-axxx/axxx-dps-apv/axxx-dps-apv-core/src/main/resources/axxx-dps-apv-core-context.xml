<?xml version="1.0" encoding="UTF-8"?>
<!-- Core context for the DPS APV Web application. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cxf="http://cxf.apache.org/core"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
 	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
 	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
 	http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd">
 	
 	
 	<!-- AUTO INJECTION  -->
 	<context:component-scan base-package="com.axxx.dps.apv" />
 	<context:annotation-config />
 	
 	<!-- DEFAULT CONFIGURATION (MAY BE OVERRIDEN) -->
	<bean id="com.axxx.dps.apv.configurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:axxx-dps-apv.properties</value>
				<value>classpath:agent.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="false" />
	</bean>


 	<!-- WEBSERVICES -->

	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml"/>
	<import resource="classpath:META-INF/tesb/agent-context.xml" /> 

	<cxf:bus>
		<cxf:features>
			<cxf:logging/>
		</cxf:features>
	</cxf:bus>

	<!-- http-conf:conduit name="*.http-conduit">
		<http-conf:client ProxyServer="localhost" ProxyServerPort="8082" ProxyServerType="HTTP" />
	</http-conf:conduit -->

	<jaxws:endpoint id="com.axxx.dps.apv.ws.precomptePartenaireWebServiceImplEndpoint"
		implementor="#com.axxx.dps.apv.ws.precomptePartenaireWebServiceImpl"
		address="${axxx.dps.apv.ws.baseUrl}/PrecomptePartenaireService">
	 <!-- Talend feature -->
        <jaxws:features>
          <ref bean="eventFeature"/>
        </jaxws:features>
      </jaxws:endpoint>

 	<jaxws:client id="com.ancv.form.ws.esbContactSvcClient"
 		serviceClass="fr.axxx.pivotal.ContactSvcSoap"
 		address="${axxx.dps.apv.ws.esb.baseUrl}/ContactSvc.asmx" >
 	</jaxws:client>
 	
	<jaxws:endpoint id="com.axxx.dps.apv.ws.projetWebServiceImplEndpoint"
		implementor="#com.axxx.dps.apv.ws.projetWebServiceImpl"
		address="${axxx.dps.apv.ws.baseUrl}/ProjetService" />
	
	
	<!-- PERSISTENCE -->
    
	<bean id="com.axxx.dps.apv.datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		p:driverClass="${axxx.dps.apv.db.driverClass}"
		p:jdbcUrl="${axxx.dps.apv.db.jdbcUrl}"
		p:user="${axxx.dps.apv.db.user}"
		p:password="${axxx.dps.apv.db.password}"
		
		p:initialPoolSize="${axxx.dps.apv.db.initialPoolSize}" p:minPoolSize="${axxx.dps.apv.db.minPoolSize}"
		p:maxPoolSize="${axxx.dps.apv.db.maxPoolSize}" p:preferredTestQuery="SELECT 1"
		p:testConnectionOnCheckin="true" p:idleConnectionTestPeriod="300"
		p:unreturnedConnectionTimeout="${axxx.dps.apv.db.unreturnedConnectionTimeout}" 
		p:debugUnreturnedConnectionStackTraces="${axxx.dps.apv.db.debugUnreturnedConnectionStackTraces}"
		destroy-method="close" />
		
	<bean id="com.axxx.dps.apv.sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- NB. not LocalSessionFactoryBean, which would require explicit entity mapping conf -->
		<property name="dataSource" ref="com.axxx.dps.apv.datasource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${axxx.dps.apv.hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${axxx.dps.apv.hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<!-- prop key="hibernate.connection.autocommit">false</prop -->
				<!-- prop key="hibernate.bytecode.provider">cglib</prop --><!-- default javassist,  -->
				
				<!-- prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
				<prop key="net.sf.ehcache.configurationResourceName">/ehcache.xml</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">/ehcache.xml</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop -->
				<!-- prop key="hibernate.cache.region_prefix">ow.axxx.cache</prop-->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.axxx.dps.apv.model</value>
			</list>
		</property>
	</bean>
	
	<!-- bean id="com.axxx.dps.apv.cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="shared" value="true" />
  	</bean -->
	
	<!--
	session management : session in view pattern
	through servlet filter explicitly opening & closing session
	to avoid all LazyInitializationException even in projet.getTdr()
	& allows more efficient transaction-less database reads.
	NB. alternative : to let session be auto opened by Spring along its transaction demarcation.
	 -->
	<bean id="com.axxx.dps.apv.transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="com.axxx.dps.apv.sessionFactory"/>
	<!-- NOT p:hibernateManagedSession="true" (else Hibernate would be in charge of starting session,
	but we want Spring doing it, allowing for sessionFactory.getCurrentSession() to auto return the
	transaction's open session,
	see http://stackoverflow.com/questions/4699381/best-way-to-inject-hibernate-session-by-spring-3 ) -->
	<tx:annotation-driven transaction-manager="com.axxx.dps.apv.transactionManager" />
	
	
	<!-- VALIDATION -->
	
	<!-- i18n, see http://www.mkyong.com/spring-mvc/spring-3-mvc-and-jsr303-valid-example/ -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" /><!-- in src/main/resources/messages.properties -->
	</bean>
	
</beans>
